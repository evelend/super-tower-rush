<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
 //global.ip = "127.0.0.1"
 global.port = 14804
 
 global.playerid = -1
 global.menu_enable=0
 
 global.KryptKey="memolaLAmamola"
 global.gameid = string(game_id)
 
ini_open("settings.ini") //RESETEA LOS WINS Y CARGA IP DEL INI
global.ip=ini_read_string("MULTIPLAYER","serverip","")
ini_write_string("INGAME","winsp1","0");
ini_write_string("INGAME","winsp2","0");
ini_write_string("INGAME","tutorial","0");
ini_close();
  

music=global.music
sound=global.sound
global.bot=0
global.practice=0

//The number of options you want
optionNumber = 8; 

//Calculate the spacing of options and various related variables.
directionOriginal = 360/optionNumber;
directionOffset = 0; 
currentIncrement = 0;
isRotating = false;
currentSelected= 0;
rotateDirection = 0; 

//The radius of the circle
offsetLengthX = 250;
offsetLengthY = 60;

//Rotation speed, higher values mean slower rotation
rotationSpeed = 10;

//Declare the drawing direction
drawDirection = 0;

//Calculate some variables used later
rotateIncrement = (directionOriginal/rotationSpeed); 


optionArray[0] = "OPTIONS"
optionArray[1] = "----"
optionArray[2] = "EXIT"
optionArray[3] = "----"
optionArray[4] = "CREDITS"
optionArray[5] = "MULTI PLAYER"
optionArray[6] = "SINGLE PLAYER"
optionArray[7] = "TWO PLAYER"


x = room_width/2
y = room_height/2+120
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_number(obj_loginregistercancel)=1 or instance_number(obj_singleplayermenu)=1//hace que no puedas mover el menu mientras sale el bocadillo de login
exit

if keyboard_check(vk_escape)
game_end()

transition_kind=21
if (isRotating) //If we are rotating
{
    if (currentIncrement &lt; directionOriginal)//If rotation isnt complete
    {
        directionOffset+=(rotateDirection*rotateIncrement); //Rotate, by the increment
        currentIncrement+=rotateIncrement; //Add increment, to detemine if rotation is complete
    }
    else
    {
        currentIncrement = 0; //Set back to 0
        isRotating = false; //Stop rotating
    }
}

if keyboard_check(global.kleft) or keyboard_check(vk_left)
{
if (isRotating ==  false)//If we are not rotating.
{
    if sound=1{SS_PlaySound(global.s_menutic)}
    isRotating = true; //Start rotating
    rotateDirection = 1; //Control which direction we are rotating. -1 is right, 1 is left
    if currentSelected &gt; 0
    {
        currentSelected -= 1;
    }
    else
    {
       currentSelected = optionNumber-1; 
    }
}
}

if keyboard_check(global.kright) or keyboard_check(vk_right)
{
if (isRotating ==  false) //if we are not rotating
{
    if sound=1{SS_PlaySound(global.s_menutic)}
    isRotating = true; //start rotating
    rotateDirection = -1; //Control which direction we are rotating. -1 is right, 1 is left
    
    if (currentSelected &lt; optionNumber-1)
    {
        currentSelected += 1;
    }
    else
    {
       currentSelected = 0; 
    }
}}

if keyboard_check_pressed(global.kok) or keyboard_check_pressed(vk_enter) or keyboard_check_pressed(vk_space)
{
if (isRotating ==  false) //if we are not rotating
{
    if sound=1{SS_PlaySound(global.s_aceptar)}
    if currentSelected=0 and instance_number(obj_workinprogresssing)=0 //SINGLE PLAYER
    instance_create(0,0,obj_singleplayermenu)
    
    if currentSelected=1 //TWO PLAYERS
    {
    global.bot=0
    room_goto(rm_2player)
    if music=1{SS_StopSound(global.m_tutorial)}}
    
    if currentSelected=2 //OPCIONES
    {room_goto(rm_opciones)
    if music=1{SS_StopSound(global.m_tutorial)}}
    
    if currentSelected=3 and instance_number(obj_tutorialmenuprinci)=0 //TUTORIAL
    instance_create(0,0,obj_tutorialmenuprinci)
    
    if currentSelected=4 //EXIT
    game_end()
    
    if currentSelected=5and instance_number(obj_workinprogresssing)=0//SHOP
    instance_create(0,0,obj_workinprogresssing)
    
    if currentSelected=6 and instance_number(obj_creditosdraw)=0//CREDITS
    instance_create(0,0,obj_creditosdraw)
    if currentSelected=7//MULTIPLAYER
    instance_create(0,0,obj_loginregistercancel)


}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="30">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the drawing options on the text
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
draw_set_font(fontmenu);
draw_set_color(c_black)
draw_sprite_ext(spr_marcomenuprinci,1,x,y+60,1,1,0,c_white,0.7)
for(i=0; i&lt;optionNumber; i+=1)
{
    //Calculate the xpoint from the center of the circle
    pointX = x+lengthdir_x(offsetLengthX,(i*directionOriginal)+directionOffset);
    
    //Calculate the ypoint from the center of the circle
    pointY = y+lengthdir_y(offsetLengthY,(i*directionOriginal)+directionOffset);

    //Draw the options text
    draw_sprite_ext(spr_menubuttons,i,pointX,pointY,1,1,0,c_white,1)
    //draw_text_ext_transformed(pointX,pointY,optionArray[i],-1,-1,-1,-1,drawDirection-180);
}
draw_sprite_ext(spr_marcomenuprinci,0,x,y+60,1,1,0,c_white,1)

draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
